/**:
  ros__parameters:
    obstacle_cruise:
      option:
        planning_algorithm: "pid_base" # currently supported algorithm is "pid_base"

      cruise_planning:
        idling_time: 2.0 # idling time to detect front vehicle starting deceleration [s]
        min_ego_accel_for_rss: -1.0 # ego's acceleration to calculate RSS distance [m/ss]
        min_object_accel_for_rss: -1.0 # front obstacle's acceleration to calculate RSS distance [m/ss]
        safe_distance_margin : 5.0 # This is also used as a stop margin [m]

        pid_based_planner:
          use_velocity_limit_based_planner: true
          error_function_type: quadratic # choose from linear, quadratic

          velocity_limit_based_planner:
              # PID gains to keep safe distance with the front vehicle
              kp: 10.0
              ki: 0.0
              kd: 2.0

              output_ratio_during_accel: 0.6 # target acceleration is multiplied with this value while ego accelerates to catch up the front vehicle [-]
              vel_to_acc_weight: 12.0 # target acceleration is calculated by (target_velocity - current_velocity) * vel_to_acc_weight [-]

              enable_jerk_limit_to_output_acc: false

              disable_target_acceleration: true

          velocity_insertion_based_planner:
              kp_acc: 6.0
              ki_acc: 0.0
              kd_acc: 2.0

              kp_jerk: 20.0
              ki_jerk: 0.0
              kd_jerk: 0.0

              output_acc_ratio_during_accel: 0.6 # target acceleration is multiplied with this value while ego accelerates to catch up the front vehicle [-]
              output_jerk_ratio_during_accel: 1.0 # target acceleration is multiplied with this value while ego accelerates to catch up the front vehicle [-]

              enable_jerk_limit_to_output_acc: true

          min_accel_during_cruise: -2.0 # minimum acceleration during cruise to slow down [m/ss]
          min_cruise_target_vel: 0.0 # minimum target velocity during slow down [m/s]
          time_to_evaluate_rss: 0.0

          lpf_normalized_error_cruise_dist_gain: 0.2

        optimization_based_planner:
          dense_resampling_time_interval: 0.2
          sparse_resampling_time_interval: 2.0
          dense_time_horizon: 5.0
          max_time_horizon: 25.0
          velocity_margin: 0.2 #[m/s]

          # Parameters for safe distance
          t_dangerous: 0.5

          # For initial Motion
          replan_vel_deviation: 5.0         # velocity deviation to replan initial velocity [m/s]
          engage_velocity: 0.25              # engage velocity threshold [m/s] (if the trajectory velocity is higher than this value, use this velocity for engage vehicle speed)
          engage_acceleration: 0.1           # engage acceleration [m/ss] (use this acceleration when engagement)
          engage_exit_ratio: 0.5             # exit engage sequence to normal velocity planning when the velocity exceeds engage_exit_ratio x engage_velocity.
          stop_dist_to_prohibit_engage: 0.5  # if the stop point is in this distance, the speed is set to 0 not to move the vehicle [m]

          # Weights for optimization
          max_s_weight: 100.0
          max_v_weight: 1.0
          over_s_safety_weight:  1000000.0
          over_s_ideal_weight:  50.0
          over_v_weight:  500000.0
          over_a_weight:  5000.0
          over_j_weight:  10000.0

      obstacle_filtering:
        object_type:
          inside:
            unknown: true
            car: true
            truck: true
            bus: true
            trailer: true
            motorcycle: true
            bicycle: true
            pedestrian: false

          outside:
            unknown: false
            car: true
            truck: true
            bus: true
            trailer: true
            motorcycle: true
            bicycle: false
            pedestrian: false

        max_lat_margin: 1.0 # lateral margin between obstacle and trajectory band with ego's width

        # if crossing vehicle is determined as target obstacles or not
        crossing_obstacle:
          obstacle_velocity_threshold : 1.0 # velocity threshold for crossing obstacle for cruise or stop [m/s]
          obstacle_traj_angle_threshold : 0.523599 # [rad] = 70 [deg], yaw threshold of crossing obstacle against the nearest trajectory point for cruise or stop

        outside_obstacle:
          obstacle_velocity_threshold : 1.5 # minimum velocity threshold of obstacles outside the trajectory to cruise or stop [m/s]
          ego_obstacle_overlap_time_threshold : 0.2 #  time threshold to decide cut-in obstacle for cruise or stop [s]
          max_prediction_time_for_collision_check : 10.0 # prediction time to check collision between obstacle and ego
          max_lateral_time_margin: 5.0 # time threshold of lateral margin between obstacle and trajectory band with ego's width [s]
          num_of_predicted_paths: 1 # number of the highest confidence predicted path to check collision between obstacle and ego
        yield:
          enable_yield: true
          lat_distance_threshold: 5.0 # lateral margin between obstacle in neighbor lanes and trajectory band with ego's width for yielding
          max_lat_dist_between_obstacles: 2.5 # lateral margin between moving obstacle in neighbor lanes and stopped obstacle in front of it
          max_obstacles_collision_time: 10.0 # how far the blocking obstacle
          stopped_obstacle_velocity_threshold: 0.5

        # hysteresis for cruise and stop
        obstacle_velocity_threshold_from_cruise : 3.0 # stop planning is executed to the obstacle whose velocity is less than this value [m/s]
        obstacle_velocity_threshold_to_cruise : 3.5 # stop planning is executed to the obstacle whose velocity is less than this value [m/s]
