/**:
  ros__parameters:
    obstacle_stop:
      option:
        ignore_crossing_obstacle: true
        suppress_sudden_stop: true

      stop_planning:
        stop_margin : 5.0 # longitudinal margin to obstacle [m]
        terminal_stop_margin : 3.0 # Stop margin at the goal. This value cannot exceed stop margin. [m]
        min_behavior_stop_margin: 3.0 # [m]

        hold_stop_velocity_threshold: 0.01 # The maximum ego velocity to hold stopping [m/s]
        hold_stop_distance_threshold: 0.3 # The ego keeps stopping if the distance to stop changes within the threshold [m]

        stop_on_curve:
          enable_approaching: false
          additional_stop_margin: 3.0 # [m]
          min_stop_margin: 3.0 # [m]

        object_type_specified_params:
          types: # For the listed types, the node try to read the following type specified values
            - "default"
            - "unknown"
          # default: For the default type, which denotes the other types listed above, the following param is defined implicitly, and the other type-specified parameters are not defined.
            # limit_min_acc: common_param.yaml/limit.min_acc
          unknown:
            limit_min_acc: -1.2 # overwrite the deceleration limit, in usually, common_param.yaml/limit.min_acc is referred.
            sudden_object_acc_threshold: -1.1 # If a stop can be achieved by a deceleration smaller than this value, it is not considered as "sudden stop".
            sudden_object_dist_threshold: 1000.0 # If a stop distance is longer than this value, it is not considered as "sudden stop".
            abandon_to_stop: false # If true, the planner gives up to stop when it cannot avoid to run over while maintaining the deceleration limit.

      obstacle_filtering:
        object_type:
          pointcloud: false

          inside:
            unknown: true
            car: true
            truck: true
            bus: true
            trailer: true
            motorcycle: true
            bicycle: true
            pedestrian: true

          outside:
            unknown: false
            car: false
            truck: false
            bus: false
            trailer: false
            motorcycle: false
            bicycle: false
            pedestrian: false

        # hysteresis for velocity
        obstacle_velocity_threshold_to_stop : 3.0 # stop planning is executed to the obstacle whose velocity is less than this value [m/s]
        obstacle_velocity_threshold_from_stop : 3.5 # stop planning is executed to the obstacle whose velocity is less than this value [m/s]

        max_lat_margin: 0.3 # lateral margin between the obstacles except for unknown and ego's footprint
        max_lat_margin_against_unknown: 0.3 # lateral margin between the unknown obstacles and ego's footprint

        min_velocity_to_reach_collision_point: 2.0 # minimum velocity margin to calculate time to reach collision [m/s]
        stop_obstacle_hold_time_threshold : 1.0 # maximum time for holding closest stop obstacle

        outside_obstacle:
          max_lateral_time_margin: 4.5 # time threshold of lateral margin between the obstacles and ego's footprint [s]
          num_of_predicted_paths: 1 # number of the highest confidence predicted path to check collision between obstacle and ego
          pedestrian_deceleration_rate: 0.5 # planner perceives pedestrians will stop with this rate to avoid unnecessary stops [m/ss]
          bicycle_deceleration_rate: 0.5 # planner perceives bicycles will stop with this rate to avoid unnecessary stops [m/ss]

        crossing_obstacle:
          collision_time_margin : 1.0 # time threshold of collision between obstacle adn ego for cruise or stop [s]
