<?xml version="1.0"?>
<launch>
  <!-- Parameters -->
  <arg name="object_recognition_detection_object_merger_data_association_matrix_param_path" default="$(find-pkg-share autoware_object_merger)/config/data_association_matrix.param.yaml"/>
  <arg name="object_recognition_detection_object_merger_distance_threshold_list_path" default="$(find-pkg-share autoware_object_merger)/config/overlapped_judge.param.yaml"/>
  <arg name="far_object_merger_sync_queue_size" default="20"/>

  <!-- Pipeline junctions -->
  <arg name="lidar_detection_model_type"/>
  <arg name="use_radar_tracking_fusion"/>
  <arg name="use_detection_by_tracker"/>
  <arg name="use_near_radar_fusion" default="false"/>

  <arg name="use_validator"/>
  <arg name="objects_validation_method"/>
  <arg name="use_pointcloud_map"/>

  <arg name="use_object_filter" description="use object filter"/>
  <arg name="objects_filter_method"/>
  <let name="without_dbt_and_filter" value="$(eval &quot;'$(var use_detection_by_tracker)'=='false' and '$(var use_object_filter)'=='false' &quot;)"/>

  <!-- external interfaces -->
  <arg name="number_of_cameras"/>
  <arg name="input/camera0/image"/>
  <arg name="input/camera0/info"/>
  <arg name="input/camera0/rois"/>
  <arg name="input/camera1/image"/>
  <arg name="input/camera1/info"/>
  <arg name="input/camera1/rois"/>
  <arg name="input/camera2/image"/>
  <arg name="input/camera2/info"/>
  <arg name="input/camera2/rois"/>
  <arg name="input/camera3/image"/>
  <arg name="input/camera3/info"/>
  <arg name="input/camera3/rois"/>
  <arg name="input/camera4/image"/>
  <arg name="input/camera4/info"/>
  <arg name="input/camera4/rois"/>
  <arg name="input/camera5/image"/>
  <arg name="input/camera5/info"/>
  <arg name="input/camera5/rois"/>
  <arg name="input/camera6/image"/>
  <arg name="input/camera6/info"/>
  <arg name="input/camera6/rois"/>
  <arg name="input/camera7/image"/>
  <arg name="input/camera7/info"/>
  <arg name="input/camera7/rois"/>
  <arg name="input/pointcloud_map/pointcloud"/>
  <arg name="input/obstacle_segmentation/pointcloud"/>
  <arg name="input/lidar_ml/objects"/>
  <arg name="input/lidar_rule/objects"/>
  <arg name="input/radar/objects"/>
  <arg name="input/radar_far/objects"/>
  <arg name="input/detection_by_tracker/objects"/>
  <arg name="output/objects" default="objects"/>

  <!-- internal interfaces -->
  <let name="radar_objects_fusion/input/objects" value="$(var input/lidar_ml/objects)"/>
  <let name="radar_objects_fusion/input/radars" value="$(var input/radar/objects)"/>
  <let name="radar_objects_fusion/output/objects" value="radar_fusion/objects"/>

  <let name="camera_roi_fusion/input/objects" value="$(var radar_objects_fusion/output/objects)" if="$(var use_near_radar_fusion)"/>
  <let name="camera_roi_fusion/input/objects" value="$(var input/lidar_ml/objects)" unless="$(var use_near_radar_fusion)"/>
  <let name="camera_roi_fusion/output/objects" value="$(var lidar_detection_model_type)/roi_fusion/objects"/>

  <let name="validator/input/objects" value="$(var camera_roi_fusion/output/objects)"/>
  <let name="validator/input/obstacle_pointcloud" value="$(var input/pointcloud_map/pointcloud)" if="$(var use_pointcloud_map)"/>
  <let name="validator/input/obstacle_pointcloud" value="$(var input/obstacle_segmentation/pointcloud)" unless="$(var use_pointcloud_map)"/>
  <let name="validator/output/objects" value="$(var lidar_detection_model_type)/validation/objects"/>

  <let name="merger1/input/objects0" value="$(var validator/output/objects)" if="$(var use_validator)"/>
  <let name="merger1/input/objects0" value="$(var input/lidar_ml/objects)" unless="$(var use_validator)"/>
  <let name="merger1/input/objects1" value="$(var input/lidar_rule/objects)"/>
  <let name="merger1/output/objects" value="$(var output/objects)" if="$(var without_dbt_and_filter)"/>
  <let name="merger1/output/objects" value="$(var lidar_detection_model_type)_roi_cluster_fusion/objects" unless="$(var without_dbt_and_filter)"/>

  <let name="merger2/input/objects0" value="$(var merger1/output/objects)"/>
  <let name="merger2/input/objects1" value="$(var input/detection_by_tracker/objects)"/>
  <let name="merger2/output/objects" value="objects_before_filter" if="$(var use_object_filter)"/>
  <let name="merger2/output/objects" value="$(var output/objects)" unless="$(var use_object_filter)"/>

  <let name="filter/input/objects" value="$(var merger2/output/objects)" if="$(var use_detection_by_tracker)"/>
  <let name="filter/input/objects" value="$(var merger1/output/objects)" unless="$(var use_detection_by_tracker)"/>
  <let name="filter/output/objects" value="$(var output/objects)"/>

  <let name="merger3/input/objects0" value="near_objects"/>
  <let name="merger3/input/objects1" value="$(var input/radar_far/objects)"/>
  <let name="merger3/output/objects" value="$(var output/objects)"/>

  <!-- Radar fusion -->
  <group>
    <include file="$(find-pkg-share autoware_radar_fusion_to_detected_object)/launch/radar_object_fusion_to_detected_object.launch.xml" if="$(var use_near_radar_fusion)">
      <arg name="input/objects" value="$(var radar_objects_fusion/input/objects)"/>
      <arg name="input/radars" value="$(var radar_objects_fusion/input/radars)"/>
      <arg name="output/objects" value="$(var radar_objects_fusion/output/objects)"/>
    </include>
  </group>

  <!-- Camera ROI fusion -->
  <group>
    <include file="$(find-pkg-share autoware_image_projection_based_fusion)/launch/roi_detected_object_fusion.launch.xml">
      <arg name="input/rois_number" value="$(var number_of_cameras)"/>
      <arg name="input/rois0" value="$(var input/camera0/rois)"/>
      <arg name="input/rois1" value="$(var input/camera1/rois)"/>
      <arg name="input/rois2" value="$(var input/camera2/rois)"/>
      <arg name="input/rois3" value="$(var input/camera3/rois)"/>
      <arg name="input/rois4" value="$(var input/camera4/rois)"/>
      <arg name="input/rois5" value="$(var input/camera5/rois)"/>
      <arg name="input/rois6" value="$(var input/camera6/rois)"/>
      <arg name="input/rois7" value="$(var input/camera7/rois)"/>
      <arg name="input/camera_info0" value="$(var input/camera0/info)"/>
      <arg name="input/camera_info1" value="$(var input/camera1/info)"/>
      <arg name="input/camera_info2" value="$(var input/camera2/info)"/>
      <arg name="input/camera_info3" value="$(var input/camera3/info)"/>
      <arg name="input/camera_info4" value="$(var input/camera4/info)"/>
      <arg name="input/camera_info5" value="$(var input/camera5/info)"/>
      <arg name="input/camera_info6" value="$(var input/camera6/info)"/>
      <arg name="input/camera_info7" value="$(var input/camera7/info)"/>
      <arg name="input/image0" value="$(var input/camera0/image)"/>
      <arg name="input/image1" value="$(var input/camera1/image)"/>
      <arg name="input/image2" value="$(var input/camera2/image)"/>
      <arg name="input/image3" value="$(var input/camera3/image)"/>
      <arg name="input/image4" value="$(var input/camera4/image)"/>
      <arg name="input/image5" value="$(var input/camera5/image)"/>
      <arg name="input/image6" value="$(var input/camera6/image)"/>
      <arg name="input/image7" value="$(var input/camera7/image)"/>
      <arg name="input/objects" value="$(var camera_roi_fusion/input/objects)"/>
      <arg name="output/objects" value="$(var camera_roi_fusion/output/objects)"/>
      <arg name="param_path" value="$(var roi_detected_object_fusion_param_path)"/>
    </include>
  </group>

  <!-- Validator -->
  <group if="$(var use_validator)">
    <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/detection/filter/object_validator.launch.xml">
      <arg name="input/obstacle_pointcloud" value="$(var validator/input/obstacle_pointcloud)"/>
      <arg name="input/objects" value="$(var validator/input/objects)"/>
      <arg name="output/objects" value="$(var validator/output/objects)"/>
      <arg name="objects_validation_method" value="$(var objects_validation_method)"/>
    </include>
  </group>

  <!-- 1st merger -->
  <group>
    <include file="$(find-pkg-share autoware_object_merger)/launch/object_association_merger.launch.xml">
      <arg name="node_name" value="object_association_merger_alpha"/>
      <arg name="input/object0" value="$(var merger1/input/objects0)"/>
      <arg name="input/object1" value="$(var merger1/input/objects1)"/>
      <arg name="output/object" value="$(var merger1/output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
    </include>
  </group>

  <!-- 2nd merger: + detection_by_tracker -->
  <group if="$(var use_detection_by_tracker)">
    <include file="$(find-pkg-share autoware_object_merger)/launch/object_association_merger.launch.xml">
      <arg name="node_name" value="object_association_merger_beta"/>
      <arg name="input/object0" value="$(var merger2/input/objects0)"/>
      <arg name="input/object1" value="$(var merger2/input/objects1)"/>
      <arg name="output/object" value="$(var merger2/output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
    </include>
  </group>

  <!-- Filter -->
  <group>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/detection/filter/object_filter.launch.xml" if="$(var use_object_filter)">
      <arg name="objects_filter_method" value="$(var objects_filter_method)"/>
      <arg name="input/objects" value="$(var filter/input/objects)"/>
      <arg name="output/objects" value="$(var filter/output/objects)"/>
    </include>
  </group>

  <!-- 3rd merger: + radar -->
  <!-- Merge far_objects and near_objects in detection stage.
      Control parameter 'use_radar_tracking_fusion' should defined in perception.launch.xml -->
  <group unless="$(var use_radar_tracking_fusion)">
    <include file="$(find-pkg-share autoware_object_merger)/launch/object_association_merger.launch.xml">
      <arg name="node_name" value="object_association_merger_gamma"/>
      <arg name="input/object0" value="$(var merger3/input/objects0)"/>
      <arg name="input/object1" value="$(var merger3/input/objects1)"/>
      <arg name="output/object" value="$(var merger3/output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
      <arg name="sync_queue_size" value="$(var far_object_merger_sync_queue_size)"/>
    </include>
  </group>
</launch>
