<?xml version="1.0"?>
<launch>
  <arg name="enable_image_decompressor" default="true" description="enable image decompressor"/>
  <arg name="use_ml_detector" default="true" description="enable fine position adjustment of traffic light"/>
  <arg name="ml_detection_model_type" default="fine_detection_model" description="select ml model for TL detection: fine_detection_model or whole_image_detection_model"/>
  <arg name="fusion_only" default="false" description="launch only occlusion_predictor and multi_camera_fusion"/>
  <arg name="input/cloud" default="/sensing/lidar/top/pointcloud_raw_ex" description="point cloud for occlusion prediction"/>
  <arg name="judged/traffic_signals" default="/perception/traffic_light_recognition/judged/traffic_signals"/>
  <arg name="internal/traffic_signals" default="/perception/traffic_light_recognition/internal/traffic_signals"/>
  <arg name="external/traffic_signals" default="/perception/traffic_light_recognition/external/traffic_signals"/>
  <arg name="output/traffic_signals" default="/perception/traffic_light_recognition/traffic_signals"/>
  <arg name="use_crosswalk_traffic_light_estimator" default="true" description="output pedestrian's traffic light signals"/>
  <arg name="crosswalk_traffic_light_estimator_param_file" default="$(find-pkg-share autoware_crosswalk_traffic_light_estimator)/config/crosswalk_traffic_light_estimator.param.yaml"/>
  <arg name="all_camera_namespaces" default="[camera6, camera7]"/>

  <!-- ML parameters -->
  <arg name="whole_image_detector_model_path" default="$(find-pkg-share autoware_tensorrt_yolox)/data"/>
  <arg name="whole_image_detector_model_name" default="yolox_s_car_ped_tl_detector_960_960_batch_1.onnx"/>
  <arg name="fine_detector_param_path" default="$(find-pkg-share autoware_traffic_light_fine_detector)/config/traffic_light_fine_detector.param.yaml"/>
  <arg name="car_classifier_param_path" default="$(find-pkg-share autoware_traffic_light_classifier)/config/car_traffic_light_classifier.param.yaml"/>
  <arg name="pedestrian_classifier_param_path" default="$(find-pkg-share autoware_traffic_light_classifier)/config/pedestrian_traffic_light_classifier.param.yaml"/>
  <arg name="traffic_light_fine_detector_model_path" default="$(find-pkg-share autoware_traffic_light_fine_detector)/data" description="fine detector label path"/>
  <arg name="traffic_light_fine_detector_model_name" default="tlr_yolox_s_batch_6" description="fine detector onnx model filename"/>
  <arg name="traffic_light_fine_detector_label_name" default="tlr_labels.txt" description="fine detector label filename"/>
  <arg name="traffic_light_classifier_model_path" default="$(find-pkg-share autoware_traffic_light_classifier)/data" description="classifier label path"/>
  <arg name="car_traffic_light_classifier_label_name" default="lamp_labels.txt" description="classifier label filename"/>
  <arg name="pedestrian_traffic_light_classifier_label_name" default="lamp_labels_ped.txt" description="classifier label filename"/>
  <arg name="car_traffic_light_classifier_model_name" default="traffic_light_classifier_mobilenetv2_batch_6.onnx" description="classifier onnx model filename"/>
  <arg name="pedestrian_traffic_light_classifier_model_name" default="ped_traffic_light_classifier_mobilenetv2_batch_6.onnx" description="classifier onnx model filename"/>
  <arg name="traffic_light_multi_camera_fusion_param_path" default="$(find-pkg-share autoware_traffic_light_multi_camera_fusion)/config/traffic_light_multi_camera_fusion.param.yaml"/>

  <!-- main TLR pipeline on each camera -->
  <group unless="$(var fusion_only)">
    <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_camera_info_relay.launch.py">
      <arg name="all_camera_namespaces" value="$(var all_camera_namespaces)"/>
    </include>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_map_based_detector.launch.py">
      <arg name="all_camera_namespaces" value="$(var all_camera_namespaces)"/>
      <arg name="use_ml_detector" value="$(var use_ml_detector)"/>
    </include>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_node_container.launch.py">
      <arg name="all_camera_namespaces" value="$(var all_camera_namespaces)"/>
      <arg name="enable_image_decompressor" value="$(var enable_image_decompressor)"/>
      <arg name="ml_detection_model_type" value="$(var ml_detection_model_type)"/>
      <arg name="use_ml_detector" value="$(var use_ml_detector)"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="whole_image_detector_model_path" value="$(var whole_image_detector_model_path)"/>
      <arg name="whole_image_detector_model_name" value="$(var whole_image_detector_model_name)"/>
      <arg name="fine_detector_param_path" value="$(var fine_detector_param_path)"/>
      <arg name="car_classifier_param_path" value="$(var car_classifier_param_path)"/>
      <arg name="pedestrian_classifier_param_path" value="$(var pedestrian_classifier_param_path)"/>
    </include>
  </group>

  <!-- traffic_light_occlusion_predictor on each camera -->
  <group if="$(eval &quot;'$(var ml_detection_model_type)'=='fine_detection_model'&quot;)">
    <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_occlusion_predictor.launch.py">
      <arg name="all_camera_namespaces" value="$(var all_camera_namespaces)"/>
      <arg name="input/cloud" value="$(var input/cloud)"/>
    </include>
  </group>

  <!-- traffic_light_multi_camera_fusion -->
  <group>
    <include file="$(find-pkg-share autoware_traffic_light_multi_camera_fusion)/launch/traffic_light_multi_camera_fusion.launch.xml">
      <arg name="camera_namespaces" value="$(var all_camera_namespaces)"/>
      <arg name="param_path" value="$(var traffic_light_multi_camera_fusion_param_path)"/>
      <arg name="input/vector_map" value="/map/vector_map"/>
      <arg name="output/traffic_signals" value="$(var internal/traffic_signals)"/>
    </include>
  </group>

  <!-- V2X fusion -->
  <group>
    <include file="$(find-pkg-share autoware_traffic_light_arbiter)/launch/traffic_light_arbiter.launch.xml">
      <arg name="perception_traffic_signals" value="$(var internal/traffic_signals)"/>
      <arg name="external_traffic_signals" value="$(var external/traffic_signals)"/>
      <arg name="output_traffic_signals" value="$(var judged/traffic_signals)"/>
    </include>
  </group>

  <group if="$(var use_crosswalk_traffic_light_estimator)">
    <node pkg="autoware_crosswalk_traffic_light_estimator" exec="crosswalk_traffic_light_estimator_node" name="crosswalk_traffic_light_estimator" output="screen">
      <remap from="~/input/vector_map" to="/map/vector_map"/>
      <remap from="~/input/route" to="/planning/mission_planning/route"/>
      <remap from="~/input/classified/traffic_signals" to="$(var judged/traffic_signals)"/>
      <remap from="~/output/traffic_signals" to="$(var output/traffic_signals)"/>
      <param from="$(var crosswalk_traffic_light_estimator_param_file)"/>
    </node>
  </group>

  <group unless="$(var use_crosswalk_traffic_light_estimator)">
    <node pkg="topic_tools" exec="relay" name="fusion_signals_relay" output="screen">
      <param name="input_topic" value="$(var judged/traffic_signals)"/>
      <param name="output_topic" value="$(var output/traffic_signals)"/>
      <param name="type" value="autoware_perception_msgs/msg/TrafficLightGroupArray"/>
    </node>
  </group>

  <!-- visualizer -->
  <group>
    <include file="$(find-pkg-share autoware_traffic_light_visualization)/launch/traffic_light_map_visualizer.launch.xml"/>
  </group>
</launch>
