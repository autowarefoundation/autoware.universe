<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Parameter files -->
  <arg name="component_state_monitor_topic_path"/>
  <arg name="duplicated_node_checker_param_path"/>
  <arg name="processing_time_checker_param_path"/>
  <arg name="mrm_comfortable_stop_operator_param_path"/>
  <arg name="mrm_emergency_stop_operator_param_path"/>
  <arg name="dummy_diag_publisher_param_path"/>
  <arg name="system_monitor_cpu_monitor_param_path"/>
  <arg name="system_monitor_gpu_monitor_param_path"/>
  <arg name="system_monitor_hdd_monitor_param_path"/>
  <arg name="system_monitor_mem_monitor_param_path"/>
  <arg name="system_monitor_net_monitor_param_path"/>
  <arg name="system_monitor_ntp_monitor_param_path"/>
  <arg name="system_monitor_process_monitor_param_path"/>
  <arg name="system_monitor_voltage_monitor_param_path"/>

  <arg name="launch_system_monitor" default="true" description="launch system monitor"/>
  <arg name="launch_dummy_diag_publisher" description="launch dummy diag publisher"/>
  <arg name="run_mode" default="online" description="options: online, logging_simulation, planning_simulation"/>
  <arg name="sensor_model" description="sensor model name"/>

  <arg name="mrm_handler_param_path"/>
  <arg name="diagnostic_graph_aggregator_param_path"/>
  <arg name="diagnostic_graph_aggregator_graph_path"/>

  <let name="sensor_launch_pkg" value="$(find-pkg-share $(var sensor_model)_launch)"/>

  <!-- Dummy Diag Publisher -->
  <arg name="launch_rqt_reconfigure" default="false"/>
  <arg name="launch_rqt_runtime_monitor" default="false"/>
  <arg name="launch_rqt_robot_monitor" default="false"/>
  <arg name="launch_rqt_runtime_monitor_err" default="false"/>

  <group>
    <push-ros-namespace namespace="/system"/>

    <!-- System Monitor -->
    <group if="$(var launch_system_monitor)">
      <push-ros-namespace namespace="system_monitor"/>
      <include file="$(find-pkg-share autoware_system_monitor)/launch/system_monitor.launch.xml">
        <arg name="cpu_monitor_config_file" value="$(var system_monitor_cpu_monitor_param_path)"/>
        <arg name="gpu_monitor_config_file" value="$(var system_monitor_gpu_monitor_param_path)"/>
        <arg name="hdd_monitor_config_file" value="$(var system_monitor_hdd_monitor_param_path)"/>
        <arg name="mem_monitor_config_file" value="$(var system_monitor_mem_monitor_param_path)"/>
        <arg name="net_monitor_config_file" value="$(var system_monitor_net_monitor_param_path)"/>
        <arg name="ntp_monitor_config_file" value="$(var system_monitor_ntp_monitor_param_path)"/>
        <arg name="process_monitor_config_file" value="$(var system_monitor_process_monitor_param_path)"/>
        <arg name="voltage_monitor_config_file" value="$(var system_monitor_voltage_monitor_param_path)"/>
      </include>
    </group>

    <!-- Duplicated Node Checker -->
    <group>
      <include file="$(find-pkg-share autoware_duplicated_node_checker)/launch/duplicated_node_checker.launch.xml">
        <arg name="config_file" value="$(var duplicated_node_checker_param_path)"/>
      </include>
    </group>

    <!-- Processing Time Checker -->
    <group>
      <include file="$(find-pkg-share autoware_processing_time_checker)/launch/processing_time_checker.launch.xml">
        <arg name="config_file" value="$(var processing_time_checker_param_path)"/>
      </include>
    </group>

    <!-- Service Log Checker -->
    <group>
      <include file="$(find-pkg-share autoware_component_interface_tools)/launch/service_log_checker.launch.xml"/>
    </group>

    <!-- Component State Monitor -->
    <group>
      <include file="$(find-pkg-share autoware_component_state_monitor)/launch/component_state_monitor.launch.py">
        <arg name="mode" value="$(var run_mode)"/>
        <arg name="file" value="$(var component_state_monitor_topic_path)"/>
      </include>
    </group>

    <!-- MRM Operator -->
    <group>
      <include file="$(find-pkg-share autoware_mrm_comfortable_stop_operator)/launch/mrm_comfortable_stop_operator.launch.py">
        <arg name="config_file" value="$(var mrm_comfortable_stop_operator_param_path)"/>
      </include>
    </group>
    <group>
      <include file="$(find-pkg-share autoware_mrm_emergency_stop_operator)/launch/mrm_emergency_stop_operator.launch.py">
        <arg name="config_file" value="$(var mrm_emergency_stop_operator_param_path)"/>
      </include>
    </group>

    <!-- Diagnostic Graph Aggregator -->
    <group>
      <include file="$(find-pkg-share autoware_system_diagnostic_monitor)/launch/system_diagnostic_monitor.launch.xml">
        <arg name="param_file" value="$(var diagnostic_graph_aggregator_param_path)"/>
        <arg name="graph_file" value="$(var diagnostic_graph_aggregator_graph_path)"/>
      </include>
    </group>

    <!-- Hazard Status Converter -->
    <group>
      <include file="$(find-pkg-share autoware_hazard_status_converter)/launch/hazard_status_converter.launch.xml"/>
    </group>

    <!-- MRM Handler -->
    <group>
      <include file="$(find-pkg-share autoware_mrm_handler)/launch/mrm_handler.launch.xml">
        <arg name="config_file" value="$(var mrm_handler_param_path)"/>
      </include>
    </group>
  </group>

  <!-- Dummy Diag Publisher -->
  <group if="$(var launch_dummy_diag_publisher)">
    <include file="$(find-pkg-share autoware_dummy_diag_publisher)/launch/dummy_diag_publisher.launch.xml">
      <arg name="config_file" value="$(var dummy_diag_publisher_param_path)"/>
      <arg name="extra_config_file_sensor" value="$(var sensor_launch_pkg)/config/dummy_diag_publisher/sensor_kit.param.yaml"/>
      <arg name="launch_rqt_reconfigure" value="$(var launch_rqt_reconfigure)"/>
      <arg name="launch_rqt_runtime_monitor" value="$(var launch_rqt_runtime_monitor)"/>
      <arg name="launch_rqt_robot_monitor" value="$(var launch_rqt_robot_monitor)"/>
      <arg name="launch_rqt_runtime_monitor_err" value="$(var launch_rqt_runtime_monitor_err)"/>
    </include>
  </group>
</launch>
