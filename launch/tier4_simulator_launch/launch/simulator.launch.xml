<launch>
  <!-- Parameter files -->
  <arg name="fault_injection_param_path"/>
  <arg name="obstacle_segmentation_ground_segmentation_elevation_map_param_path"/>
  <arg name="laserscan_based_occupancy_grid_map_param_path"/>
  <arg name="occupancy_grid_map_updater"/>
  <arg name="occupancy_grid_map_updater_param_path"/>

  <arg name="localization_error_monitor_param_path"/>
  <arg name="ekf_localizer_param_path"/>
  <arg name="stop_filter_param_path"/>
  <arg name="pose_initializer_param_path"/>
  <arg name="twist2accel_param_path"/>

  <arg name="launch_simulator_perception_modules" default="true"/>
  <arg name="launch_dummy_perception"/>
  <arg name="launch_dummy_vehicle"/>
  <arg
    name="localization_sim_mode"
    description="Select localization mode. Options are 'none', 'api' or 'pose_twist_estimator'. 'pose_twist_estimator' starts most of the localization modules except for the ndt_scan_matcher. 'api' starts an external API for initial position estimation. 'none' does not start any localization-related process."
  />
  <arg name="launch_dummy_doors"/>
  <arg name="launch_scenario_simulator_v2_adapter"/>
  <arg name="vehicle_info_param_file"/>
  <arg name="raw_vehicle_cmd_converter_param_path"/>

  <arg name="perception/enable_detection_failure" default="true" description="enable to simulate detection failure when using dummy perception"/>
  <arg name="perception/enable_object_recognition" default="false" description="enable object recognition"/>
  <arg name="perception/enable_elevation_map" default="false" description="enable elevation map loader"/>
  <arg name="perception/enable_traffic_light" default="true" description="enable traffic light"/>
  <arg name="fusion_only" default="true" description="enable only camera and V2X fusion when enabling traffic light"/>
  <arg name="perception/use_base_link_z" default="true" description="dummy perception uses base_link z axis coordinate if it is true"/>
  <arg name="sensing/visible_range" default="300.0" description="visible range when using dummy perception"/>
  <arg name="use_perception_online_evaluator" default="false" description="use perception online evaluator"/>

  <arg name="vehicle_model" description="vehicle model name"/>
  <arg name="initial_engage_state" default="true" description="/vehicle/engage state after starting Autoware"/>

  <let name="vehicle_model_pkg" value="$(find-pkg-share $(var vehicle_model)_description)"/>

  <group if="$(var launch_simulator_perception_modules)">
    <group if="$(var scenario_simulation)">
      <include file="$(find-pkg-share fault_injection)/launch/fault_injection.launch.xml">
        <arg name="config_file" value="$(var fault_injection_param_path)"/>
      </include>
    </group>

    <!-- Dummy Perception -->
    <group if="$(var launch_dummy_perception)">
      <include file="$(find-pkg-share dummy_perception_publisher)/launch/dummy_perception_publisher.launch.xml">
        <arg name="real" value="$(var perception/enable_detection_failure)"/>
        <arg name="use_object_recognition" value="$(var perception/enable_object_recognition)"/>
        <arg name="use_base_link_z" value="$(var perception/use_base_link_z)"/>
        <arg name="visible_range" value="$(var sensing/visible_range)"/>
      </include>
    </group>

    <group unless="$(var scenario_simulation)">
      <!-- Occupancy Grid -->
      <push-ros-namespace namespace="occupancy_grid_map"/>
      <include file="$(find-pkg-share tier4_perception_launch)/launch/occupancy_grid_map/probabilistic_occupancy_grid_map.launch.xml">
        <arg name="input_obstacle_pointcloud" value="true"/>
        <arg name="input_obstacle_and_raw_pointcloud" value="false"/>
        <arg name="input/obstacle_pointcloud" value="/perception/obstacle_segmentation/pointcloud"/>
        <arg name="output" value="/perception/occupancy_grid_map/map"/>
        <arg name="occupancy_grid_map_method" value="laserscan_based_occupancy_grid_map"/>
        <arg name="occupancy_grid_map_param_path" value="$(var laserscan_based_occupancy_grid_map_param_path)"/>
        <arg name="occupancy_grid_map_updater" value="$(var occupancy_grid_map_updater)"/>
        <arg name="occupancy_grid_map_updater_param_path" value="$(var occupancy_grid_map_updater_param_path)"/>
      </include>
    </group>

    <!-- perception module -->
    <group>
      <push-ros-namespace namespace="perception"/>
      <!-- object recognition -->
      <group if="$(var perception/enable_object_recognition)">
        <push-ros-namespace namespace="object_recognition"/>
        <!-- tracking module -->
        <group>
          <push-ros-namespace namespace="tracking"/>
          <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/tracking/tracking.launch.xml">
            <arg
              name="object_recognition_tracking_radar_object_tracker_data_association_matrix_param_path"
              value="$(var object_recognition_tracking_radar_object_tracker_data_association_matrix_param_path)"
            />
            <arg name="object_recognition_tracking_radar_object_tracker_tracking_setting_param_path" value="$(var object_recognition_tracking_radar_object_tracker_tracking_setting_param_path)"/>
            <arg name="object_recognition_tracking_radar_object_tracker_node_param_path" value="$(var object_recognition_tracking_radar_object_tracker_node_param_path)"/>
            <arg name="object_recognition_tracking_object_merger_data_association_matrix_param_path" value="$(var object_recognition_tracking_object_merger_data_association_matrix_param_path)"/>
            <arg name="object_recognition_tracking_object_merger_node_param_path" value="$(var object_recognition_tracking_object_merger_node_param_path)"/>
            <arg name="use_multi_channel_tracker_merger" value="false"/>
            <arg name="use_radar_tracking_fusion" value="true"/>
            <arg name="use_detection_by_tracker" value="true"/>
            <arg name="use_validator" value="true"/>
          </include>
        </group>
        <!-- prediction module -->
        <group>
          <push-ros-namespace namespace="prediction"/>
          <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/prediction/prediction.launch.xml">
            <arg name="use_vector_map" value="true"/>
          </include>
        </group>
      </group>

      <!-- perception evaluator -->
      <group if="$(var use_perception_online_evaluator)">
        <include file="$(find-pkg-share perception_online_evaluator)/launch/perception_online_evaluator.launch.xml"/>
      </group>

      <!-- publish empty objects instead of object recognition module -->
      <group unless="$(var perception/enable_object_recognition)">
        <push-ros-namespace namespace="object_recognition"/>
        <node pkg="dummy_perception_publisher" exec="empty_objects_publisher" name="empty_objects_publisher" output="screen">
          <remap from="~/output/objects" to="/perception/object_recognition/objects"/>
        </node>
      </group>

      <group if="$(var perception/enable_elevation_map)">
        <push-ros-namespace namespace="obstacle_segmentation/elevation_map"/>
        <node pkg="autoware_elevation_map_loader" exec="elevation_map_loader" name="elevation_map_loader" output="screen">
          <remap from="output/elevation_map" to="map"/>
          <remap from="input/pointcloud_map" to="/map/pointcloud_map"/>
          <remap from="input/vector_map" to="/map/vector_map"/>
          <param name="use_lane_filter" value="false"/>
          <param name="use_inpaint" value="true"/>
          <param name="inpaint_radius" value="1.0"/>
          <param name="param_file_path" value="$(var obstacle_segmentation_ground_segmentation_elevation_map_param_path)"/>
          <param name="elevation_map_directory" value="$(find-pkg-share autoware_elevation_map_loader)/data/elevation_maps"/>
          <param name="use_elevation_map_cloud_publisher" value="false"/>
        </node>
      </group>

      <!-- traffic light module -->
      <group if="$(var perception/enable_traffic_light)">
        <push-ros-namespace namespace="traffic_light_recognition"/>
        <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light.launch.xml"/>
      </group>
    </group>
  </group>

  <!-- localization -->
  <group if="$(eval '&quot;$(var localization_sim_mode)&quot;==&quot;none&quot;')">
    <!-- Do nothing -->
  </group>

  <group if="$(eval '&quot;$(var localization_sim_mode)&quot;==&quot;api&quot;')">
    <include file="$(find-pkg-share autoware_pose_initializer)/launch/pose_initializer.launch.xml">
      <arg name="user_defined_initial_pose/enable" value="false"/>
      <arg name="user_defined_initial_pose/pose" value="[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]"/>
      <arg name="ndt_enabled" value="false"/>
      <arg name="gnss_enabled" value="false"/>
      <arg name="ekf_enabled" value="false"/>
      <arg name="yabloc_enabled" value="false"/>
      <arg name="stop_check_enabled" value="false"/>
      <arg name="config_file" value="$(var pose_initializer_param_path)"/>
    </include>
  </group>

  <group if="$(eval '&quot;$(var localization_sim_mode)&quot;==&quot;pose_twist_estimator&quot;')">
    <group>
      <!-- start name space localization -->
      <push-ros-namespace namespace="localization"/>
      <group>
        <push-ros-namespace namespace="util"/>
        <include file="$(find-pkg-share autoware_pose_initializer)/launch/pose_initializer.launch.xml">
          <arg name="user_defined_initial_pose/enable" value="false"/>
          <arg name="user_defined_initial_pose/pose" value="[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]"/>
          <arg name="ndt_enabled" value="false"/>
          <arg name="gnss_enabled" value="false"/>
          <arg name="ekf_enabled" value="true"/>
          <arg name="yabloc_enabled" value="false"/>
          <arg name="stop_check_enabled" value="false"/>
          <arg name="config_file" value="$(var pose_initializer_param_path)"/>
        </include>
      </group>

      <group>
        <push-ros-namespace namespace="twist_estimator"/>
        <include file="$(find-pkg-share tier4_localization_launch)/launch/pose_twist_estimator/gyro_odometer.launch.xml"/>
      </group>

      <!-- pose_twist_fusion_filter module -->
      <group>
        <push-ros-namespace namespace="pose_twist_fusion_filter"/>
        <include file="$(find-pkg-share tier4_localization_launch)/launch/pose_twist_fusion_filter/pose_twist_fusion_filter.launch.xml"/>
      </group>
    </group>
    <!-- end name space localization -->
    <group>
      <push-ros-namespace namespace="sensing"/>
      <arg name="input_vehicle_velocity_topic" default="/vehicle/status/velocity_status"/>
      <arg name="output_twist_with_covariance" default="/sensing/vehicle_velocity_converter/twist_with_covariance"/>
      <arg name="config_file" default="$(find-pkg-share autoware_vehicle_velocity_converter)/config/vehicle_velocity_converter.param.yaml"/>

      <node pkg="autoware_vehicle_velocity_converter" exec="autoware_vehicle_velocity_converter_node" output="both">
        <param from="$(var config_file)"/>
        <remap from="velocity_status" to="$(var input_vehicle_velocity_topic)"/>
        <remap from="twist_with_covariance" to="$(var output_twist_with_covariance)"/>
      </node>
    </group>
  </group>

  <!-- Dummy doors -->
  <group if="$(var launch_dummy_doors)">
    <include file="$(find-pkg-share vehicle_door_simulator)/launch/vehicle_door_simulator.launch.xml"/>
  </group>

  <!-- Simulator Adapter -->
  <group if="$(var launch_scenario_simulator_v2_adapter)">
    <node name="scenario_simulator_v2_adapter" exec="scenario_simulator_v2_adapter" pkg="scenario_simulator_v2_adapter" output="screen">
      <param name="metric_topic_list" value="[/planning/planning_evaluator/metrics, /control/control_evaluator/metrics, /system/processing_time_checker/metrics]"/>
    </node>
  </group>

  <!-- Simulator model -->
  <group if="$(var launch_dummy_vehicle)">
    <arg name="simulator_model" default="$(var vehicle_model_pkg)/config/simulator_model.param.yaml" description="path to the file of simulator model"/>
    <!-- 'pose_only' mode publishes the pose topic as an alternative to ndt_localizer. 'full_motion' mode publishes the odometry and acceleration topics as an alternative to localization modules. -->
    <let name="motion_publish_mode" value="pose_only" if="$(eval '&quot;$(var localization_sim_mode)&quot;==&quot;pose_twist_estimator&quot;')"/>
    <let name="motion_publish_mode" value="full_motion" unless="$(eval '&quot;$(var localization_sim_mode)&quot;==&quot;pose_twist_estimator&quot;')"/>
    <include file="$(find-pkg-share simple_planning_simulator)/launch/simple_planning_simulator.launch.py">
      <arg name="vehicle_info_param_file" value="$(var vehicle_info_param_file)"/>
      <arg name="simulator_model_param_file" value="$(var simulator_model)"/>
      <arg name="initial_engage_state" value="$(var initial_engage_state)"/>
      <arg name="raw_vehicle_cmd_converter_param_path" value="$(var raw_vehicle_cmd_converter_param_path)"/>
      <arg name="motion_publish_mode" value="$(var motion_publish_mode)"/>
    </include>
  </group>
</launch>
