/**:
  ros__parameters:
    ego_frame: base_link # reference frame of ego

    selected_metrics:
      - curvature
      - point_interval
      - relative_angle
      - resampled_relative_angle
      - length
      - duration
      - velocity
      - acceleration
      - jerk
      - lateral_deviation
      - yaw_deviation
      - velocity_deviation
      - lateral_trajectory_displacement_local
      - lateral_trajectory_displacement_lookahead
      - stability
      - stability_frechet
      - obstacle_distance
      - obstacle_ttc
      - modified_goal_longitudinal_deviation
      - modified_goal_lateral_deviation
      - modified_goal_yaw_deviation
      - stop_decision

    trajectory:
      min_point_dist_m: 0.1 # [m] minimum distance between two successive points to use for angle calculation
      evaluation_time_s: 5.0 # [s] time duration for trajectory evaluation in seconds
      lookahead:
        max_dist_m: 5.0 # [m] maximum distance from ego along the trajectory to use for calculation
        max_time_s: 3.0 # [s] maximum time ahead of ego along the trajectory to use for calculation

    obstacle:
      dist_thr_m: 1.0 # [m] distance between ego and the obstacle below which a collision is considered

    planning_factor_counters:
      topic_prefix: /planning/planning_factors/
      stop_decision:
        time_threshold_s: 5.0 # [s] time threshold for a stop to be considered as the new one
        dist_threshold_m: 5.0 # [m] distance threshold for a stop to be considered as the new one
        abnormal_deceleration_threshold: 2.0 # [m/s^2] deceleration threshold for a stop to be considered as abnormal
        module_list:  # list of modules to be checked for stop deciation.
          - avoidance_by_lane_change
          - behavior_path_planner
          - blind_spot
          - crosswalk
          - detection_area
          - dynamic_obstacle_avoidance
          - dynamic_obstacle_stop
          - goal_planner
          - intersection
          - lane_change_left
          - lane_change_right
          - motion_velocity_planner
          - merge_from_private
          - no_drivable_lane
          - no_stopping_area
          - obstacle_cruise
          - obstacle_cruise_planner
          - obstacle_slow_down
          - obstacle_stop
          - obstacle_stop_planner
          - occlusion_spot
          - out_of_lane
          - run_out
          - side_shift
          - start_planner
          - static_obstacle_avoidance
          - stop_line
          - surround_obstacle_checker
          - traffic_light
          - virtual_traffic_light
          - walkway

# TODO：
#  用一个metrics_counter.cpp/hpp，写一个大类，包含各种validate(或者自己counter，返回有效和无效即可)和所需参数。
#  在metrics_counter中为所有类以及两种stop，制造两个列表:一个列表：里面是structure保存上一个stop的时间地点和计数值。另一个列表是int，保存计数值。

#  写一个onPlanningFactor的类，收集各factor并用metrics_counter验证记入成功或失败。
#  ？是否需要publish当前的counter?或者publish counter成功/失败?
